{
  "name": "CVE-2021-28714",
  "seq": "2021-28714",
  "type": "CAN",
  "status": "Candidate",
  "phase": {
    "text": "Assigned",
    "date": "20210318"
  },
  "desc": "Guest can force Linux netback driver to hog large amounts of kernel memory T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Incoming data packets for a guest in the Linux kernel's netback driver are buffered until the guest is ready to process them. There are some measures taken for avoiding to pile up too much data, but those can be bypassed by the guest: There is a timeout how long the client side of an interface can stop consuming new packets before it is assumed to have stalled, but this timeout is rather long (60 seconds by default). Using a UDP connection on a fast interface can easily accumulate gigabytes of data in that time. (CVE-2021-28715) The timeout could even never trigger if the guest manages to have only one free slot in its RX queue ring page and the next package would require more than one free slot, which may be the case when using GSO, XDP, or software hashing. (CVE-2021-28714)",
  "refs": [
    {
      "text": "DSA-5050",
      "source": "DEBIAN",
      "url": "https://www.debian.org/security/2022/dsa-5050"
    },
    {
      "text": "DSA-5096",
      "source": "DEBIAN",
      "url": "https://www.debian.org/security/2022/dsa-5096"
    },
    {
      "text": "https://xenbits.xenproject.org/xsa/advisory-392.txt",
      "source": "MISC",
      "url": "https://xenbits.xenproject.org/xsa/advisory-392.txt"
    },
    {
      "text": "[debian-lts-announce] 20220309 [SECURITY] [DLA 2940-1] linux security update",
      "source": "MLIST",
      "url": "https://lists.debian.org/debian-lts-announce/2022/03/msg00011.html"
    },
    {
      "text": "[debian-lts-announce] 20220309 [SECURITY] [DLA 2941-1] linux-4.19 security update",
      "source": "MLIST",
      "url": "https://lists.debian.org/debian-lts-announce/2022/03/msg00012.html"
    }
  ],
  "votes": {}
}
