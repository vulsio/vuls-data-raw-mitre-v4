{
	"name": "CVE-2021-47036",
	"seq": "2021-47036",
	"type": "CAN",
	"status": "Candidate",
	"phase": {
		"text": "Assigned",
		"date": "20240227"
	},
	"desc": "In the Linux kernel, the following vulnerability has been resolved: udp: skip L4 aggregation for UDP tunnel packets If NETIF_F_GRO_FRAGLIST or NETIF_F_GRO_UDP_FWD are enabled, and there are UDP tunnels available in the system, udp_gro_receive() could end-up doing L4 aggregation (either SKB_GSO_UDP_L4 or SKB_GSO_FRAGLIST) at the outer UDP tunnel level for packets effectively carrying and UDP tunnel header. That could cause inner protocol corruption. If e.g. the relevant packets carry a vxlan header, different vxlan ids will be ignored/ aggregated to the same GSO packet. Inner headers will be ignored, too, so that e.g. TCP over vxlan push packets will be held in the GRO engine till the next flush, etc. Just skip the SKB_GSO_UDP_L4 and SKB_GSO_FRAGLIST code path if the current packet could land in a UDP tunnel, and let udp_gro_receive() do GRO via udp_sk(sk)->gro_receive. The check implemented in this patch is broader than what is strictly needed, as the existing UDP tunnel could be e.g. configured on top of a different device: we could end-up skipping GRO at-all for some packets. Anyhow, that is a very thin corner case and covering it will add quite a bit of complexity. v1 -> v2: - hopefully clarify the commit message",
	"refs": [
		{
			"text": "https://git.kernel.org/stable/c/18f25dc399901426dff61e676ba603ff52c666f7",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/18f25dc399901426dff61e676ba603ff52c666f7"
		},
		{
			"text": "https://git.kernel.org/stable/c/450687386cd16d081b58cd7a342acff370a96078",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/450687386cd16d081b58cd7a342acff370a96078"
		}
	],
	"votes": {}
}
