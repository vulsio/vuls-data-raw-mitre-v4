{
	"name": "CVE-2024-35825",
	"seq": "2024-35825",
	"type": "CAN",
	"status": "Candidate",
	"phase": {
		"text": "Assigned",
		"date": "20240517"
	},
	"desc": "In the Linux kernel, the following vulnerability has been resolved: usb: gadget: ncm: Fix handling of zero block length packets While connecting to a Linux host with CDC_NCM_NTB_DEF_SIZE_TX set to 65536, it has been observed that we receive short packets, which come at interval of 5-10 seconds sometimes and have block length zero but still contain 1-2 valid datagrams present. According to the NCM spec: \"If wBlockLength = 0x0000, the block is terminated by a short packet. In this case, the USB transfer must still be shorter than dwNtbInMaxSize or dwNtbOutMaxSize. If exactly dwNtbInMaxSize or dwNtbOutMaxSize bytes are sent, and the size is a multiple of wMaxPacketSize for the given pipe, then no ZLP shall be sent. wBlockLength= 0x0000 must be used with extreme care, because of the possibility that the host and device may get out of sync, and because of test issues. wBlockLength = 0x0000 allows the sender to reduce latency by starting to send a very large NTB, and then shortening it when the sender discovers that thereâ€™s not sufficient data to justify sending a large NTB\" However, there is a potential issue with the current implementation, as it checks for the occurrence of multiple NTBs in a single giveback by verifying if the leftover bytes to be processed is zero or not. If the block length reads zero, we would process the same NTB infintely because the leftover bytes is never zero and it leads to a crash. Fix this by bailing out if block length reads zero.",
	"refs": [
		{
			"text": "https://git.kernel.org/stable/c/6b2c73111a252263807b7598682663dc33aa4b4c",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/6b2c73111a252263807b7598682663dc33aa4b4c"
		},
		{
			"text": "https://git.kernel.org/stable/c/7664ee8bd80309b90d53488b619764f0a057f2b7",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/7664ee8bd80309b90d53488b619764f0a057f2b7"
		},
		{
			"text": "https://git.kernel.org/stable/c/92b051b87658df7649ffcdef522593f21a2b296b",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/92b051b87658df7649ffcdef522593f21a2b296b"
		},
		{
			"text": "https://git.kernel.org/stable/c/a0f77b5d6067285b8eca0ee3bd1e448a6258026f",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/a0f77b5d6067285b8eca0ee3bd1e448a6258026f"
		},
		{
			"text": "https://git.kernel.org/stable/c/a766761d206e7c36d7526e0ae749949d17ca582c",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/a766761d206e7c36d7526e0ae749949d17ca582c"
		},
		{
			"text": "https://git.kernel.org/stable/c/e2dbfea520e60d58e0c498ba41bde10452257779",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/e2dbfea520e60d58e0c498ba41bde10452257779"
		},
		{
			"text": "https://git.kernel.org/stable/c/ef846cdbd100f7f9dc045e8bcd7fe4b3a3713c03",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/ef846cdbd100f7f9dc045e8bcd7fe4b3a3713c03"
		},
		{
			"text": "https://git.kernel.org/stable/c/f90ce1e04cbcc76639d6cba0fdbd820cd80b3c70",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/f90ce1e04cbcc76639d6cba0fdbd820cd80b3c70"
		}
	],
	"votes": {}
}
