{
	"name": "CVE-2024-35986",
	"seq": "2024-35986",
	"type": "CAN",
	"status": "Candidate",
	"phase": {
		"text": "Assigned",
		"date": "20240517"
	},
	"desc": "In the Linux kernel, the following vulnerability has been resolved: phy: ti: tusb1210: Resolve charger-det crash if charger psy is unregistered The power_supply frame-work is not really designed for there to be long living in kernel references to power_supply devices. Specifically unregistering a power_supply while some other code has a reference to it triggers a WARN in power_supply_unregister(): WARN_ON(atomic_dec_return(&psy->use_cnt)); Folllowed by the power_supply still getting removed and the backing data freed anyway, leaving the tusb1210 charger-detect code with a dangling reference, resulting in a crash the next time tusb1210_get_online() is called. Fix this by only holding the reference in tusb1210_get_online() freeing it at the end of the function. Note this still leaves a theoretical race window, but it avoids the issue when manually rmmod-ing the charger chip driver during development.",
	"refs": [
		{
			"text": "https://git.kernel.org/stable/c/25b3498485ac281e5851700e33b97f12c9533fd8",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/25b3498485ac281e5851700e33b97f12c9533fd8"
		},
		{
			"text": "https://git.kernel.org/stable/c/73224a5d2180066c7fe05b4656647601ba08d588",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/73224a5d2180066c7fe05b4656647601ba08d588"
		},
		{
			"text": "https://git.kernel.org/stable/c/9827caa5105fb16d1fae2e75c8d0e4662014b3ca",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/9827caa5105fb16d1fae2e75c8d0e4662014b3ca"
		},
		{
			"text": "https://git.kernel.org/stable/c/bf6e4ee5c43690e4c5a8a057bbcd4ff986bed052",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/bf6e4ee5c43690e4c5a8a057bbcd4ff986bed052"
		}
	],
	"votes": {}
}
