{
	"name": "CVE-2024-26813",
	"seq": "2024-26813",
	"type": "CAN",
	"status": "Candidate",
	"phase": {
		"text": "Assigned",
		"date": "20240219"
	},
	"desc": "In the Linux kernel, the following vulnerability has been resolved: vfio/platform: Create persistent IRQ handlers The vfio-platform SET_IRQS ioctl currently allows loopback triggering of an interrupt before a signaling eventfd has been configured by the user, which thereby allows a NULL pointer dereference. Rather than register the IRQ relative to a valid trigger, register all IRQs in a disabled state in the device open path. This allows mask operations on the IRQ to nest within the overall enable state governed by a valid eventfd signal. This decouples @masked, protected by the @locked spinlock from @trigger, protected via the @igate mutex. In doing so, it's guaranteed that changes to @trigger cannot race the IRQ handlers because the IRQ handler is synchronously disabled before modifying the trigger, and loopback triggering of the IRQ via ioctl is safe due to serialization with trigger changes via igate. For compatibility, request_irq() failures are maintained to be local to the SET_IRQS ioctl rather than a fatal error in the open device path. This allows, for example, a userspace driver with polling mode support to continue to work regardless of moving the request_irq() call site. This necessarily blocks all SET_IRQS access to the failed index.",
	"refs": [
		{
			"text": "https://git.kernel.org/stable/c/07afdfd8a68f9eea8db0ddc4626c874f29d2ac5e",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/07afdfd8a68f9eea8db0ddc4626c874f29d2ac5e"
		},
		{
			"text": "https://git.kernel.org/stable/c/09452c8fcbd7817c06e8e3212d99b45917e603a5",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/09452c8fcbd7817c06e8e3212d99b45917e603a5"
		},
		{
			"text": "https://git.kernel.org/stable/c/0f8d8f9c2173a541812dd750529f4a415117eb29",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/0f8d8f9c2173a541812dd750529f4a415117eb29"
		},
		{
			"text": "https://git.kernel.org/stable/c/62d4e43a569b67929eb3319780be5359694c8086",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/62d4e43a569b67929eb3319780be5359694c8086"
		},
		{
			"text": "https://git.kernel.org/stable/c/675daf435e9f8e5a5eab140a9864dfad6668b375",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/675daf435e9f8e5a5eab140a9864dfad6668b375"
		},
		{
			"text": "https://git.kernel.org/stable/c/7932db06c82c5b2f42a4d1a849d97dba9ce4a362",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/7932db06c82c5b2f42a4d1a849d97dba9ce4a362"
		},
		{
			"text": "https://git.kernel.org/stable/c/cc5838f19d39a5fef04c468199699d2a4578be3a",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/cc5838f19d39a5fef04c468199699d2a4578be3a"
		},
		{
			"text": "https://git.kernel.org/stable/c/d6bedd6acc0bcb1e7e010bc046032e47f08d379f",
			"source": "MISC",
			"url": "https://git.kernel.org/stable/c/d6bedd6acc0bcb1e7e010bc046032e47f08d379f"
		}
	],
	"votes": {}
}
